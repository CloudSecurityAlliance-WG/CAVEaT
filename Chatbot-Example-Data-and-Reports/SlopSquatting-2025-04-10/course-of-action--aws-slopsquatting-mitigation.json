{
  "type": "course-of-action",
  "spec_version": "2.1",
  "id": "course-of-action--aws-slopsquatting-mitigation",
  "created": "2025-04-10T12:00:00.000Z",
  "modified": "2025-04-10T12:00:00.000Z",
  "name": "AWS Slopsquatting Mitigation",
  "description": "Measures to mitigate the risk of slopsquatting attacks in AWS environments where developers use AI-assisted coding tools that may hallucinate package names. These steps focus on AWS-specific tools and services that can be used to prevent, detect, and respond to potential slopsquatting attacks.",
  "action_type": "preventative",
  "action_reference": {
    "description": "AWS-specific mitigations for slopsquatting attack vectors",
    "url": "https://github.com/cloudsecurityalliance/caveat"
  },
  "action_bin": "## AWS Environment Mitigation Steps\n\n### Web Console Implementation\n1. **Enable AWS CodeGuru Security in your CI/CD pipeline**\n   - Navigate to the AWS CodeGuru console\n   - Select \"Security\" and enable scanning\n   - Configure the service to scan all package installations in your codebase\n   - Create custom detectors for package hallucination patterns\n\n2. **Configure AWS CodeArtifact as a private repository proxy**\n   - Navigate to the AWS CodeArtifact console\n   - Create a new domain and repository\n   - Configure upstream repositories (npm, PyPI, etc.)\n   - Set up repository policies that restrict package installations to verified packages\n   - Enable package origin control to track the source of all packages\n\n3. **Set up AWS Config Rules**\n   - Navigate to the AWS Config console\n   - Create custom rules that evaluate resources for compliance with package management policies\n   - Implement rules to detect suspicious package installations\n\n4. **Implement Amazon Inspector scanning**\n   - Enable Amazon Inspector in your AWS account\n   - Configure it to scan for vulnerable or suspicious packages in your environment\n   - Set up custom findings for packages with unusual provenance or popularity metrics\n\n### CLI Implementation\n\n```bash\n# 1. Set up CodeGuru Security scanning\naws codeguru-security create-scan-configuration \\\n  --name \"DetectSuspiciousPackages\" \\\n  --repository \"codecommit://my-repository\" \\\n  --analysis-type \"Security\"  \\\n  --additional-parameters '{\"package_verification\": true}'  \\\n  --resource-tags Key=Environment,Value=Production\n\n# 2. Configure CodeArtifact as a package proxy\naws codeartifact create-domain --domain mydomain\n\naws codeartifact create-repository \\\n  --domain mydomain \\\n  --repository myrepo \\\n  --description \"Validated packages only\"\n  \n# Configure upstream repositories\naws codeartifact associate-external-connection \\\n  --domain mydomain \\\n  --repository myrepo \\\n  --external-connection public:npmjs\n\n# 3. Create a custom AWS Config rule\naws configservice put-config-rule \\\n  --config-rule '{\"ConfigRuleName\":\"detect-suspicious-packages\",\"Description\":\"Detects suspicious package installations\",\"Scope\":{\"ComplianceResourceTypes\":[\"AWS::Lambda::Function\",\"AWS::ECS::TaskDefinition\"]},\"Source\":{\"Owner\":\"CUSTOM_LAMBDA\",\"SourceIdentifier\":\"arn:aws:lambda:us-east-1:123456789012:function:DetectSuspiciousPackages\",\"SourceDetails\":[{\"EventSource\":\"aws.config\",\"MessageType\":\"ConfigurationItemChangeNotification\"}]}}'\n\n# 4. Enable Amazon Inspector\naws inspector2 enable\n\n# Create a custom filter for suspicious packages\naws inspector2 create-filter \\\n  --name \"SuspiciousPackageFilter\" \\\n  --description \"Detects potential slopsquatting packages\" \\\n  --action \"SUPPRESS\" \\\n  --filter-criteria '{\"packageVulnerabilityFilters\":[{\"packageType\":\"NPM\",\"publishedDays\":1,\"downloadCount\":{\"lowerComparison\":0,\"upperComparison\":100}}]}'\n```\n\n### API Implementation\n\n```python\nimport boto3\n\n# 1. Enable CodeGuru Security\ncodeguru = boto3.client('codeguru-security')\nresponse = codeguru.create_scan_configuration(\n    name='DetectSuspiciousPackages',\n    repository='codecommit://my-repository',\n    analysisType='Security',\n    additionalParameters={'package_verification': True},\n    resourceTags=[{'key': 'Environment', 'value': 'Production'}]\n)\n\n# 2. Configure CodeArtifact\ncodeartifact = boto3.client('codeartifact')\n\n# Create domain\nresponse = codeartifact.create_domain(\n    domain='mydomain'\n)\n\n# Create repository\nresponse = codeartifact.create_repository(\n    domain='mydomain',\n    repository='myrepo',\n    description='Validated packages only'\n)\n\n# Connect to upstream repositories\nresponse = codeartifact.associate_external_connection(\n    domain='mydomain',\n    repository='myrepo',\n    externalConnection='public:npmjs'\n)\n\n# 3. Set up Config rules\nconfig = boto3.client('config')\nresponse = config.put_config_rule(\n    ConfigRule={\n        'ConfigRuleName': 'detect-suspicious-packages',\n        'Description': 'Detects suspicious package installations',\n        'Scope': {\n            'ComplianceResourceTypes': [\n                'AWS::Lambda::Function',\n                'AWS::ECS::TaskDefinition'\n            ]\n        },\n        'Source': {\n            'Owner': 'CUSTOM_LAMBDA',\n            'SourceIdentifier': 'arn:aws:lambda:us-east-1:123456789012:function:DetectSuspiciousPackages',\n            'SourceDetails': [{\n                'EventSource': 'aws.config',\n                'MessageType': 'ConfigurationItemChangeNotification'\n            }]\n        }\n    }\n)\n\n# 4. Enable Inspector\ninspector = boto3.client('inspector2')\nresponse = inspector.enable()\n\n# Create a filter for suspicious packages\nresponse = inspector.create_filter(\n    name='SuspiciousPackageFilter',\n    description='Detects potential slopsquatting packages',\n    action='SUPPRESS',\n    filterCriteria={\n        'packageVulnerabilityFilters': [{\n            'packageType': 'NPM',\n            'publishedDays': 1,\n            'downloadCount': {\n                'lowerComparison': 0,\n                'upperComparison': 100\n            }\n        }]\n    }\n)\n```\n\n### Verification Steps\n\n1. **Verify CodeGuru Security scanning**\n   - Initiate a scan of your repository\n   - Check the findings for detected package hallucinations or suspicious packages\n   - Confirm that alerts are being generated for new or unusual packages\n\n2. **Verify CodeArtifact configuration**\n   - Attempt to pull a known good package through your CodeArtifact repository\n   - Verify that package provenance information is captured\n   - Test repository policies by attempting to download a package that violates your policies\n\n3. **Verify Config Rules**\n   - Deploy a test resource with a suspicious package\n   - Verify that the Config rule flags the resource as non-compliant\n   - Review the detailed findings to confirm detection accuracy\n\n4. **Verify Inspector scanning**\n   - Check that Inspector is scanning your resources\n   - Verify that the custom filter for suspicious packages is working\n   - Confirm that alerts are being generated for packages with suspicious characteristics"
}
