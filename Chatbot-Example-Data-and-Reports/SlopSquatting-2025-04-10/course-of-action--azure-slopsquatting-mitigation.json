{
  "type": "course-of-action",
  "spec_version": "2.1",
  "id": "course-of-action--azure-slopsquatting-mitigation",
  "created": "2025-04-10T12:00:00.000Z",
  "modified": "2025-04-10T12:00:00.000Z",
  "name": "Azure Slopsquatting Mitigation",
  "description": "Measures to mitigate the risk of slopsquatting attacks in Azure environments where developers use AI-assisted coding tools that may hallucinate package names. These steps focus on Azure-specific tools and services that can be used to prevent, detect, and respond to potential slopsquatting attacks.",
  "action_type": "preventative",
  "action_reference": {
    "description": "Azure-specific mitigations for slopsquatting attack vectors",
    "url": "https://github.com/cloudsecurityalliance/caveat"
  },
  "action_bin": "## Azure Environment Mitigation Steps\n\n### Azure Portal Implementation\n\n1. **Configure Azure Artifact Feed with Package Validation**\n   - Navigate to Azure DevOps Artifacts\n   - Create a new feed or configure an existing one\n   - Set up upstream sources with package validation rules\n   - Enable package locking and immutability\n   - Configure package retention policies\n\n2. **Implement Azure DevOps Pipelines Security**\n   - Navigate to your Azure DevOps project\n   - Configure pipeline settings to enable security scanning\n   - Create custom pipeline tasks that validate package sources\n   - Set up branch policies that require package validation\n\n3. **Configure Microsoft Defender for Cloud**\n   - Navigate to Microsoft Defender for Cloud\n   - Enable Defender for Containers, Container Registries, and App Services\n   - Configure security alerts for suspicious package installations\n   - Set up custom alerts for newly published packages with low download counts\n\n4. **Implement Azure Policy for Package Management**\n   - Navigate to Azure Policy in the Azure Portal\n   - Create custom policies that enforce package management standards\n   - Assign policies to your subscriptions and resource groups\n   - Configure remediation tasks for non-compliant resources\n\n### Azure CLI Implementation\n\n```bash\n# 1. Create an Azure Artifacts feed with upstream sources\naz artifacts universal create --feed my-feed --org \"https://dev.azure.com/myorg/\" --project \"MyProject\"\n\n# Configure upstream sources with validation\naz artifacts feed upstream add --feed my-feed --name npmjs --protocol npm --endpoint npmjs --org \"https://dev.azure.com/myorg/\" --project \"MyProject\"\n\n# 2. Set up a pipeline with security validation\naz pipelines create --name \"Secure-Build\" --repository \"MyRepo\" --branch \"main\" --yml-path \"azure-pipelines.yml\" --org \"https://dev.azure.com/myorg/\" --project \"MyProject\"\n\n# 3. Configure Microsoft Defender for Cloud\naz security auto-provisioning-setting update --name default --auto-provision On\n\n# Enable Microsoft Defender for Containers\naz security pricing update --name containers --tier \"standard\"\n\n# Enable Microsoft Defender for Container Registries\naz security pricing update --name containerRegistry --tier \"standard\"\n\n# Enable Microsoft Defender for App Service\naz security pricing update --name appServices --tier \"standard\"\n\n# 4. Create Azure Policy for Package Management\naz policy definition create --name \"enforce-package-validation\" \\\n  --display-name \"Enforce Package Validation\" \\\n  --description \"Ensures all packages installed come from validated sources\" \\\n  --mode All \\\n  --rules \"policy-rule.json\"\n\n# Assign the policy\naz policy assignment create --name \"enforce-package-validation-assignment\" \\\n  --policy \"enforce-package-validation\" \\\n  --scope \"/subscriptions/{subscriptionId}\"\n```\n\n### Azure API Implementation\n\n```csharp\n// C# example for Azure API implementation\nusing Azure.Identity;\nusing Azure.ResourceManager;\nusing Azure.ResourceManager.SecurityCenter;\nusing Azure.ResourceManager.PolicyInsights;\nusing Microsoft.TeamFoundation.Build.WebApi;\nusing Microsoft.VisualStudio.Services.Common;\nusing Microsoft.VisualStudio.Services.WebApi;\n\n// 1. Configure Azure Artifacts\npublic async Task ConfigureArtifactsFeed()\n{\n    // Connection to Azure DevOps\n    var connection = new VssConnection(new Uri(\"https://dev.azure.com/myorg\"), new VssBasicCredential(string.Empty, personalAccessToken));\n    \n    // Create a feed with upstream sources\n    var feedClient = connection.GetClient<FeedClient>();\n    \n    var feed = new Feed\n    {\n        Name = \"my-feed\",\n        Description = \"Validated package feed\",\n        UpstreamEnabled = true,\n        UpstreamSources = new List<UpstreamSource>\n        {\n            new UpstreamSource\n            {\n                Name = \"npmjs\",\n                Protocol = \"npm\",\n                Location = \"https://registry.npmjs.org/\",\n                ValidationEnabled = true\n            }\n        }\n    };\n    \n    await feedClient.CreateFeedAsync(feed);\n}\n\n// 2. Configure Pipeline Security\npublic async Task ConfigurePipelineSecurity()\n{\n    var connection = new VssConnection(new Uri(\"https://dev.azure.com/myorg\"), new VssBasicCredential(string.Empty, personalAccessToken));\n    var buildClient = connection.GetClient<BuildHttpClient>();\n    \n    var definition = new BuildDefinition\n    {\n        Name = \"Secure-Build\",\n        Repository = new BuildRepository\n        {\n            Name = \"MyRepo\",\n            DefaultBranch = \"refs/heads/main\",\n            Type = \"git\"\n        },\n        Process = new YamlProcess\n        {\n            YamlFilename = \"azure-pipelines.yml\"\n        },\n        QueueStatus = DefinitionQueueStatus.Enabled\n    };\n    \n    await buildClient.CreateDefinitionAsync(definition, \"MyProject\");\n}\n\n// 3. Configure Microsoft Defender for Cloud\npublic async Task ConfigureDefenderForCloud()\n{\n    var credential = new DefaultAzureCredential();\n    var armClient = new ArmClient(credential);\n    \n    // Get the subscription\n    var subscription = await armClient.GetDefaultSubscriptionAsync();\n    \n    // Enable auto-provisioning\n    var autoProvisioningSettings = subscription.GetSecurityCenterAutoProvisioningSettings();\n    var defaultSetting = await autoProvisioningSettings.GetAsync(\"default\");\n    await defaultSetting.Value.UpdateAsync(new SecurityCenterAutoProvisioningSettingData\n    {\n        AutoProvision = \"On\"\n    });\n    \n    // Enable Microsoft Defender for Containers\n    var pricings = subscription.GetSecurityCenterPricings();\n    await pricings.CreateOrUpdateAsync(\"containers\", new SecurityCenterPricingData\n    {\n        PricingTier = \"Standard\"\n    });\n    \n    // Enable Microsoft Defender for Container Registries\n    await pricings.CreateOrUpdateAsync(\"containerRegistry\", new SecurityCenterPricingData\n    {\n        PricingTier = \"Standard\"\n    });\n    \n    // Enable Microsoft Defender for App Service\n    await pricings.CreateOrUpdateAsync(\"appServices\", new SecurityCenterPricingData\n    {\n        PricingTier = \"Standard\"\n    });\n}\n\n// 4. Create Azure Policy for Package Management\npublic async Task CreatePackageManagementPolicy()\n{\n    var credential = new DefaultAzureCredential();\n    var armClient = new ArmClient(credential);\n    \n    // Get the subscription\n    var subscription = await armClient.GetDefaultSubscriptionAsync();\n    \n    // Create policy definition\n    var policyDefinition = new PolicyDefinitionData\n    {\n        DisplayName = \"Enforce Package Validation\",\n        Description = \"Ensures all packages installed come from validated sources\",\n        Mode = \"All\",\n        PolicyRule = File.ReadAllText(\"policy-rule.json\")\n    };\n    \n    var policyDefinitionResource = await subscription.GetPolicyDefinitions().CreateOrUpdateAsync(\"enforce-package-validation\", policyDefinitionData);\n    \n    // Assign the policy\n    var policyAssignmentData = new PolicyAssignmentData\n    {\n        DisplayName = \"Enforce Package Validation Assignment\",\n        PolicyDefinitionId = policyDefinitionResource.Value.Id\n    };\n    \n    await subscription.GetPolicyAssignments().CreateOrUpdateAsync(\"enforce-package-validation-assignment\", policyAssignmentData);\n}\n```\n\n### Verification Steps\n\n1. **Verify Azure Artifacts Feed Configuration**\n   - Attempt to download a package through your feed\n   - Check that upstream sources are correctly configured\n   - Verify that package validation rules are enforced\n   - Confirm that package provenance information is tracked\n\n2. **Verify Azure DevOps Pipeline Security**\n   - Run a pipeline that includes package installations\n   - Verify that package validation tasks run and check package integrity\n   - Confirm that suspicious packages are flagged or blocked\n\n3. **Verify Microsoft Defender for Cloud Configuration**\n   - Check that Defender for Containers, Container Registries, and App Services are enabled\n   - Deploy a test resource with a suspicious package\n   - Verify that security alerts are generated\n\n4. **Verify Azure Policy for Package Management**\n   - Deploy a resource that includes package installations\n   - Check policy compliance in the Azure Portal\n   - Verify that non-compliant resources are flagged\n   - Confirm that remediation tasks run correctly"
}
