{
  "type": "course-of-action",
  "spec_version": "2.1",
  "id": "course-of-action--gcp-slopsquatting-mitigation",
  "created": "2025-04-10T12:00:00.000Z",
  "modified": "2025-04-10T12:00:00.000Z",
  "name": "GCP Slopsquatting Mitigation",
  "description": "Measures to mitigate the risk of slopsquatting attacks in Google Cloud Platform environments where developers use AI-assisted coding tools that may hallucinate package names. These steps focus on GCP-specific tools and services that can be used to prevent, detect, and respond to potential slopsquatting attacks.",
  "action_type": "preventative",
  "action_reference": {
    "description": "GCP-specific mitigations for slopsquatting attack vectors",
    "url": "https://github.com/cloudsecurityalliance/caveat"
  },
  "action_bin": "## Google Cloud Platform Mitigation Steps\n\n### GCP Console Implementation\n\n1. **Configure Artifact Registry with Package Validation**\n   - Navigate to the Google Cloud Console\n   - Select Artifact Registry\n   - Create a new repository or configure an existing one\n   - Enable Virtual Repository to proxy and cache public repositories\n   - Configure upstreams with package validation rules\n   - Set up package scanning with Artifact Analysis\n\n2. **Implement Cloud Build with Security Scanning**\n   - Navigate to Cloud Build in the GCP Console\n   - Create or modify build configurations to include security scanning\n   - Add steps to verify package provenance and integrity\n   - Configure build triggers that enforce package validation\n\n3. **Set up Binary Authorization**\n   - Navigate to Binary Authorization in the GCP Console\n   - Create an attestation policy\n   - Configure required attestors for your container images\n   - Enforce that only properly attested images can be deployed\n\n4. **Configure Security Command Center**\n   - Navigate to Security Command Center\n   - Enable premium tier for advanced threat detection\n   - Configure Container Threat Detection\n   - Set up custom findings for suspicious package installations\n   - Create notifications for security findings\n\n5. **Implement Organization Policies**\n   - Navigate to Organization Policies in the GCP Console\n   - Create custom constraints related to package management\n   - Apply policies to your organization, folders, or projects\n\n### GCP CLI Implementation\n\n```bash\n# 1. Create Artifact Registry repository with upstream configuration\ngcloud artifacts repositories create my-repo \\\n  --repository-format=npm \\\n  --location=us-central1 \\\n  --description=\"Validated package repository\"\n\n# Configure upstream sources for package proxy\ngcloud artifacts repositories create npm-proxy \\\n  --repository-format=npm \\\n  --location=us-central1 \\\n  --mode=REMOTE_REPOSITORY \\\n  --remote-repository-config=upstream-url=https://registry.npmjs.org\n\ngcloud artifacts repositories create virtual-npm \\\n  --repository-format=npm \\\n  --location=us-central1 \\\n  --mode=VIRTUAL_REPOSITORY \\\n  --virtual-repository-config=\"upstream-policies=HIERARCHY,repositories=projects/my-project/locations/us-central1/repositories/my-repo,repositories=projects/my-project/locations/us-central1/repositories/npm-proxy\"\n\n# Enable Artifact Analysis for scanning packages\ngcloud services enable artifactanalysis.googleapis.com\n\n# 2. Configure Cloud Build with security scanning\ncat > cloudbuild.yaml << EOF\nsteps:\n- name: 'gcr.io/cloud-builders/npm'\n  id: 'Install packages'\n  args: ['install', '--registry=https://us-central1-npm.pkg.dev/my-project/virtual-npm/']\n\n- name: 'gcr.io/cloud-builders/npm'\n  id: 'Package verification'\n  entrypoint: 'bash'\n  args:\n  - '-c'\n  - |\n    pip install packageverifier\n    python -m packageverifier verify_dependencies package.json\n\n- name: 'gcr.io/$PROJECT_ID/safety-checker'\n  id: 'Security scan'\n  args: ['check', '--full-report']\nEOF\n\n# Set up a build trigger\ngcloud builds triggers create github \\\n  --name=\"package-validated-build\" \\\n  --repo=owner/repository \\\n  --branch-pattern=\"main\" \\\n  --build-config=\"cloudbuild.yaml\"\n\n# 3. Set up Binary Authorization\ngcloud services enable binaryauthorization.googleapis.com\n\n# Create a policy\ncat > policy.yaml << EOF\nadmissionWhitelistPatterns:\n- namePattern: gcr.io/google-containers/*\n- namePattern: gcr.io/google_containers/*\n- namePattern: k8s.gcr.io/*\ndefaultAdmissionRule:\n  evaluationMode: REQUIRE_ATTESTATION\n  enforcementMode: ENFORCED_BLOCK_AND_AUDIT_LOG\n  requireAttestationsBy:\n  - projects/my-project/attestors/security-attestor\nEOF\n\n# Upload the policy\ngcloud container binauthz policy import policy.yaml\n\n# 4. Configure Security Command Center\ngcloud services enable securitycenter.googleapis.com\n\n# Enable premium tier\ngcloud scc settings update --organization=ORGANIZATION_ID --service-tier=premium\n\n# Enable Container Threat Detection\ngcloud services enable containerthreatdetection.googleapis.com\n\n# 5. Create Organization Policy Constraints\ngcloud services enable orgpolicy.googleapis.com\n\n# Create a custom constraint for package validation\ncat > package-validation-constraint.yaml << EOF\nname: projects/my-project/policies/custom.packageValidation\nspec:\n  rules:\n  - condition:\n      expression: \"resource.type == 'cloudbuild.googleapis.com/Build'\"\n    enforce: true\n  etag: AA==\nEOF\n\ngcloud org-policies set-policy package-validation-constraint.yaml\n```\n\n### GCP API Implementation\n\n```python\n# Python example for GCP API implementation\nfrom google.cloud import artifactregistry_v1\nfrom google.cloud import cloudbuild_v1\nfrom google.cloud import container_v1\nfrom google.cloud import securitycenter_v1\nfrom google.cloud import binaryauthorization_v1\nfrom google.cloud import orgpolicy_v1\n\n# 1. Configure Artifact Registry with Package Validation\ndef configure_artifact_registry():\n    client = artifactregistry_v1.ArtifactRegistryClient()\n    \n    # Create standard repository\n    parent = f\"projects/my-project/locations/us-central1\"\n    repository = artifactregistry_v1.Repository(\n        name=f\"{parent}/repositories/my-repo\",\n        format=artifactregistry_v1.Repository.Format.NPM,\n        description=\"Validated package repository\"\n    )\n    client.create_repository(parent=parent, repository_id=\"my-repo\", repository=repository)\n    \n    # Create remote repository for npm proxy\n    remote_repo = artifactregistry_v1.Repository(\n        name=f\"{parent}/repositories/npm-proxy\",\n        format=artifactregistry_v1.Repository.Format.NPM,\n        mode=artifactregistry_v1.Repository.Mode.REMOTE_REPOSITORY,\n        remote_repository_config=artifactregistry_v1.RemoteRepositoryConfig(\n            upstream_url=\"https://registry.npmjs.org\"\n        )\n    )\n    client.create_repository(parent=parent, repository_id=\"npm-proxy\", repository=remote_repo)\n    \n    # Create virtual repository\n    virtual_repo = artifactregistry_v1.Repository(\n        name=f\"{parent}/repositories/virtual-npm\",\n        format=artifactregistry_v1.Repository.Format.NPM,\n        mode=artifactregistry_v1.Repository.Mode.VIRTUAL_REPOSITORY,\n        virtual_repository_config=artifactregistry_v1.VirtualRepositoryConfig(\n            upstream_policies=[artifactregistry_v1.VirtualRepositoryConfig.UpstreamPolicy.HIERARCHY],\n            repositories=[\n                f\"{parent}/repositories/my-repo\",\n                f\"{parent}/repositories/npm-proxy\"\n            ]\n        )\n    )\n    client.create_repository(parent=parent, repository_id=\"virtual-npm\", repository=virtual_repo)\n\n# 2. Configure Cloud Build with Security Scanning\ndef configure_cloud_build():\n    client = cloudbuild_v1.CloudBuildClient()\n    \n    # Create build config\n    build_config = cloudbuild_v1.Build(\n        steps=[\n            cloudbuild_v1.BuildStep(\n                id=\"Install packages\",\n                name=\"gcr.io/cloud-builders/npm\",\n                args=[\"install\", \"--registry=https://us-central1-npm.pkg.dev/my-project/virtual-npm/\"]\n            ),\n            cloudbuild_v1.BuildStep(\n                id=\"Package verification\",\n                name=\"gcr.io/cloud-builders/npm\",\n                entrypoint=\"bash\",\n                args=[\n                    \"-c\",\n                    \"pip install packageverifier\\npython -m packageverifier verify_dependencies package.json\"\n                ]\n            ),\n            cloudbuild_v1.BuildStep(\n                id=\"Security scan\",\n                name=\"gcr.io/${PROJECT_ID}/safety-checker\",\n                args=[\"check\", \"--full-report\"]\n            )\n        ]\n    )\n    \n    # Create trigger\n    trigger = cloudbuild_v1.BuildTrigger(\n        name=\"package-validated-build\",\n        github=cloudbuild_v1.GitHubEventsConfig(\n            owner=\"owner\",\n            name=\"repository\",\n            push=cloudbuild_v1.PushFilter(\n                branch=\"main\"\n            )\n        ),\n        build=build_config\n    )\n    \n    client.create_build_trigger(project_id=\"my-project\", trigger=trigger)\n\n# 3. Set up Binary Authorization\ndef configure_binary_authorization():\n    client = binaryauthorization_v1.BinauthzManagementServiceV1Client()\n    \n    # Create a policy\n    policy = binaryauthorization_v1.Policy(\n        admission_whitelist_patterns=[\n            binaryauthorization_v1.AdmissionWhitelistPattern(name_pattern=\"gcr.io/google-containers/*\"),\n            binaryauthorization_v1.AdmissionWhitelistPattern(name_pattern=\"gcr.io/google_containers/*\"),\n            binaryauthorization_v1.AdmissionWhitelistPattern(name_pattern=\"k8s.gcr.io/*\")\n        ],\n        default_admission_rule=binaryauthorization_v1.AdmissionRule(\n            evaluation_mode=binaryauthorization_v1.AdmissionRule.EvaluationMode.REQUIRE_ATTESTATION,\n            enforcement_mode=binaryauthorization_v1.AdmissionRule.EnforcementMode.ENFORCED_BLOCK_AND_AUDIT_LOG,\n            require_attestations_by=[\"projects/my-project/attestors/security-attestor\"]\n        )\n    )\n    \n    client.update_policy(policy=policy)\n\n# 4. Configure Security Command Center\ndef configure_security_command_center():\n    client = securitycenter_v1.SecurityCenterClient()\n    \n    # Get organization\n    org_name = f\"organizations/ORGANIZATION_ID\"\n    \n    # Update Security Command Center settings\n    settings = securitycenter_v1.SecurityCenterSettings(\n        name=f\"{org_name}/settings\",\n        service_tier=securitycenter_v1.SecurityCenterSettings.ServiceTier.PREMIUM\n    )\n    \n    client.update_security_center_settings(security_center_settings=settings)\n    \n    # Create a custom detector for suspicious packages\n    source = securitycenter_v1.Source(\n        name=f\"{org_name}/sources/my-custom-source\",\n        display_name=\"Suspicious Package Detector\",\n        description=\"Detects potential slopsquatting attacks through package analysis\"\n    )\n    \n    created_source = client.create_source(parent=org_name, source=source)\n\n# 5. Create Organization Policy Constraints\ndef configure_org_policies():\n    client = orgpolicy_v1.OrgPolicyClient()\n    \n    # Create a custom constraint\n    constraint = orgpolicy_v1.Constraint(\n        name=\"projects/my-project/policies/custom.packageValidation\",\n        display_name=\"Package Validation Policy\",\n        description=\"Enforces validation of all installed packages\",\n        constraint_default=orgpolicy_v1.Constraint.ConstraintDefault.ALLOW,\n        list_constraint=orgpolicy_v1.Constraint.ListConstraint(\n            supports_in=True,\n            allowed_values=[\"VALIDATED\"]\n        )\n    )\n    \n    client.create_constraint(parent=\"projects/my-project\", constraint=constraint)\n    \n    # Create a policy\n    policy = orgpolicy_v1.Policy(\n        name=\"projects/my-project/policies/custom.packageValidation\",\n        spec=orgpolicy_v1.PolicySpec(\n            rules=[\n                orgpolicy_v1.PolicySpec.PolicyRule(\n                    condition=orgpolicy_v1.PolicySpec.Condition(\n                        expression=\"resource.type == 'cloudbuild.googleapis.com/Build'\"\n                    ),\n                    enforce=True\n                )\n            ],\n            etag=\"AA==\"\n        )\n    )\n    \n    client.set_policy(policy=policy)\n```\n\n### Verification Steps\n\n1. **Verify Artifact Registry Configuration**\n   - Attempt to download a package through your virtual repository\n   - Check that upstream sources are correctly configured\n   - Verify that package scanning is active\n   - Confirm that package provenance information is tracked\n\n2. **Verify Cloud Build Security**\n   - Run a build that includes package installations\n   - Verify that package verification steps run and check package integrity\n   - Confirm that suspicious packages are flagged or blocked\n\n3. **Verify Binary Authorization**\n   - Attempt to deploy a container image without proper attestations\n   - Verify that the deployment is blocked\n   - Add the required attestations and confirm deployment succeeds\n\n4. **Verify Security Command Center Configuration**\n   - Check that premium tier and Container Threat Detection are enabled\n   - Deploy a test resource with a suspicious package\n   - Verify that security findings are generated\n   - Check that notifications are sent for security findings\n\n5. **Verify Organization Policies**\n   - Attempt to deploy a resource that violates your package management policies\n   - Verify that the operation is blocked with an appropriate error message\n   - Modify the resource to comply with policies and confirm deployment succeeds"
}
